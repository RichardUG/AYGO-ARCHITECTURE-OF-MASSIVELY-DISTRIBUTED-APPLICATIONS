package co.edu.escuelaing.twitter.pojo;

import co.edu.escuelaing.twitter.adapter.DynamoDBAdapter;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "Tweet")

public class Tweet {
    private static final String PRODUCTS_TABLE_NAME = "Tweet";
    private final AmazonDynamoDB client;
    private static DynamoDBAdapter db_adapter;
    private DynamoDBMapper mapper;

    private String idTweet;
    private String userName;
    private String comment;
    private Timestamp date;

    public Tweet() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PRODUCTS_TABLE_NAME))
                .build();
        db_adapter = DynamoDBAdapter.getInstance();
        this.client = db_adapter.getClient();
        this.mapper = db_adapter.createDbMapper(mapperConfig);
    }


    @DynamoDBHashKey(attributeName = "idTweet")
    @DynamoDBAutoGeneratedKey
    public String getIdTweet() {
        return idTweet;
    }

    public void setIdTweet(String idTweet) {
        this.idTweet = idTweet;
    }

    @DynamoDBHashKey(attributeName = "userName")
    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    @DynamoDBHashKey(attributeName = "comment")
    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    @DynamoDBHashKey(attributeName = "date")
    public Timestamp getDate() {
        return date;
    }

    public void setDate(Timestamp date) {
        this.date = date;
    }


    public List<Tweet> list() {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        return this.mapper.scan(Tweet.class, scanExp);
    }

    public Tweet get(String id) {
        Tweet tweet = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Tweet> queryExp = new DynamoDBQueryExpression<Tweet>()
                .withKeyConditionExpression("idTweet = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Tweet> result = this.mapper.query(Tweet.class, queryExp);
        if (result.size() > 0) {
            tweet = result.get(0);
        }
        return tweet;
    }

    public void save(Tweet tweet) throws IOException {
        this.mapper.save(tweet);
    }


    public Boolean delete(String id) throws IOException {
        Tweet tweet = null;
        tweet = get(id);
        if (tweet != null) {
            this.mapper.delete(tweet);
        } else {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Tweet{" +
                "idTweet=" + idTweet +
                ", userName='" + userName + '\'' +
                ", comment='" + comment + '\'' +
                ", date=" + date +
                '}';
    }
}
